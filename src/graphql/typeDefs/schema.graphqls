schema {
    query: Query
    mutation: Mutation
}

type Query {
    #task
    getTaskById(id: ID!): Task @withAuth
    getTasks(cursor: String, first: Int): TaskConnection! @withAuth
}

type Mutation {
    #user
    signIn(input: SignInInput!): String!
    signUp(input: SignUpInput!): String!

    #task
    addTask(input: TaskInput!): Task! @withAuth
    updateTask(id: ID!, input: TaskInput!): Task! @withAuth
    deleteTask(id: ID!): Task! @withAuth
    addContributorToTask(id: ID!, userId: ID!): Task! @withAuth
    removeContributorFromTask(id: ID!, userId: ID!): Task! @withAuth

    #comment
    addComment(taskId: ID!, input: CommentInput!): Comment! @withAuth
}

directive @withAuth on QUERY | FIELD_DEFINITION

enum TaskStatus {
    OPEN
    IN_PROGRESS
    DONE
}

enum TaskActivityAction {
    TASK_CREATION
    TITLE_UPDATE
    DESCRIPTION_UPDATE
    TASK_ASSIGNMENT
    NEW_COMMENT
}


union TaskActivity =
    | TaskCreationActivity
    | StatusUpdateTaskActivity
    | TitleUpdateTaskActivity
    | DescriptionUpdateTaskActivity
    | TaskAssignmentActivity
    | NewCommentTaskActivity


type StatusUpdateTaskActivity {
    id: ID!
    author: User!
    task: Task!
    previousStatus: TaskStatus!
    newStatus: TaskStatus!
    createdAt:Float!
}

type TaskCreationActivity {
    id: ID!
    author: User!
    task: Task!
    createdAt:Float!
}

type TitleUpdateTaskActivity {
    id: ID!
    author: User!
    task: Task!
    previousTitle:String!
    newTitle:String!
    createdAt:Float!
}

type DescriptionUpdateTaskActivity {
    id: ID!
    author: User!
    task: Task!
    previousDescription: String!
    newDescription: String!
    createdAt:Float!
}

type TaskAssignmentActivity {
    id: ID!
    author: User!
    task: Task!
    assignee: User!
    createdAt:Float!
}

type NewCommentTaskActivity {
    id: ID!
    author: User!
    task: Task!
    createdAt:Float!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    displayName: String!
    email: String!
    createdAt: Float!
}

type Task {
    id: ID!
    author: User!
    isViewerAuthor: Boolean!
    title: String!
    description: String
    status: TaskStatus!
    contributors: [User!]!
    activities: [TaskActivity!]!
    comments(cursor:String, first:Int): CommentConnection!
    createdAt: Float!
}



type TitleMetaData {
    previousTitle: String
    newTitle: String
}

type DescriptionMetaData {
    previousDescription: String
    newDescription: String
}

type Comment {
    id: ID!
    task: Task!
    author: User!
    isViewerAuthor: Boolean!
    content: String!
    createdAt: Float!
}

type PageInfo {
    endCursor: String
    hasNextPage: Boolean
}

type TaskConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [TaskEdge!]!
}

type TaskEdge {
    cursor: String!
    node: Task!
}

type CommentConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [CommentEdge!]!
}

type CommentEdge {
    cursor: String!
    node: Comment!
}

input CommentInput {
    content: String!
}

input TaskInput {
    title: String!
    description: String
    status: TaskStatus
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}
